# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{config, lib, modulesPath, ...}: {
  imports = [(modulesPath + "/installer/scan/not-detected.nix")];

  boot.initrd.availableKernelModules = ["xhci_pci" "thunderbolt" "nvme" "uas" "sd_mod"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = ["kvm-intel"];
  boot.extraModulePackages = [];
  boot.kernelParams = [
    "i915.enable_guc=2"
    "i915.mitigations=off"
    "mitigations=off"
    "bgrt_disable"
    # "quiet"
  ];
  boot.resumeDevice = "/dev/mapper/swap";

  boot.initrd.luks.devices = {
    zroot1.device = "/dev/disk/by-id/nvme-eui.002538b121b3218a-part3";
    zroot2.device = "/dev/disk/by-id/nvme-eui.0025388981b0cba6-part1";
  };

  swapDevices = [{
    device = "/dev/mapper/swap";
    encrypted.enable = true;
    encrypted.label = "swap";
    encrypted.blkDev = "/dev/disk/by-id/nvme-SAMSUNG_MZVL21T0HCLR-00B00_S676NX0T115316-part2";
  }];

  fileSystems = {
    "/" = {device = "zroot/default"; fsType = "zfs";};
    "/home" = {device = "zroot/home"; fsType = "zfs";};
    "/nix" = {device = "zroot/nix"; fsType = "zfs";};
    "/root" = {device = "zroot/home/root"; fsType = "zfs";};
    "/boot" = {
      device = "/dev/disk/by-partlabel/EFI\\x20system\\x20partition";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };
  };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  networking.hostId = lib.mkDefault "5736070c";

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
