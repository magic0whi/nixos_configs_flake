# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{config, lib, pkgs, modulesPath, ...}: let
  cryptroot_name = "crypt_root";
in{
  imports = [(modulesPath + "/installer/scan/not-detected.nix")];

  boot.initrd.availableKernelModules = [ "xhci_pci" "nvme" "uas" "sd_mod" ];
  boot.initrd.kernelModules = [];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [];
  boot.kernelParams = [
    "resume=/dev/mapper/${cryptroot_name}"
    "resume_offset=1058048"
    "i915.enable_guc=2"
    "i915.mitigations=off"
    "mitigations=off"
    "bgrt_disable"
    # "quiet"
  ];

  boot.initrd.luks.devices."${cryptroot_name}".device = "/dev/disk/by-uuid/494c9374-0502-495a-a39d-4b8b1365dbd4";

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/9de6d78b-8617-4aa3-b317-62d6312d8eea";
    fsType = "btrfs";
    options = ["subvol=@" "compress=zstd" "discard=async"];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/9de6d78b-8617-4aa3-b317-62d6312d8eea";
    fsType = "btrfs";
    options = ["subvol=@home" "compress=zstd" "discard=async"];
  };

  fileSystems."/.snapshots" = {
    device = "/dev/disk/by-uuid/9de6d78b-8617-4aa3-b317-62d6312d8eea";
    fsType = "btrfs";
    neededForBoot = true;
    options = ["subvol=@snapshots" "compress=zstd" "discard=async"];
  };

  fileSystems."/persistent" = {
    device = "/dev/disk/by-uuid/9de6d78b-8617-4aa3-b317-62d6312d8eea";
    fsType = "btrfs";
    neededForBoot = true;
    options = ["subvol=@persistent" "compress=zstd" "discard=async"];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/9de6d78b-8617-4aa3-b317-62d6312d8eea";
    fsType = "btrfs";
    options = ["subvol=@nix" "compress=zstd" "discard=async"];
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/81EC-E52B";
    fsType = "vfat";
    options = ["discard" "fmask=0022" "dmask=0022"];
  };

  swapDevices = [{device="/.snapshots/swapfile";}];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
