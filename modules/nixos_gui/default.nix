{pkgs, config, lib, mylib, myvars, ...}: with lib;
let
  cfg = config.modules.desktop.wayland;
in {
  options.modules.desktop.wayland.enable = lib.mkEnableOption "Wayland Display Server";
  imports = mylib.scan_path ./.;
  config = lib.mkIf cfg.enable {
    xdg.portal = {
      enable = true;
      wlr.enable = true;
      extraPortals = with pkgs; [
        xdg-desktop-portal-wlr
        xdg-desktop-portal-gtk # For GTK
      ];
      config.common = {
        default = ["gtk"]; # Use xdg-desktop-portal-gtk for every portal interface...
        "org.freedesktop.impl.portal.Secret" = ["gnome-keyring"]; # except the secret portal, which is handled by gnome-keyring
      };
    };
    services = {
      xserver.enable = lib.mkDefault false; # disable xorg server
      greetd = { # https://wiki.archlinux.org/title/Greetd
        enable = lib.mkDefault true;
        settings = {
          default_session = { # Wayland Desktop Manager is installed only for user via home-manager!
            user = myvars.username;
            # .wayland-session is a script generated by home-manager, which links to the current wayland compositor(sway/hyprland or others).
            # with such a vendor-no-locking script, we can switch to another wayland compositor without modifying greetd's config here.
            # command = "$HOME/.wayland-session"; # start a wayland session directly without a login manager
            command = "${pkgs.greetd.tuigreet}/bin/tuigreet --time --cmd $HOME/.wayland-session";  # start wayland session with a TUI login manager
          };
        };
      };
      gvfs.enable = lib.mkDefault true; # Mount, trash, and other functionalities
      tumbler.enable = lib.mkDefault true; # Thumbnail support for images
    };
    security.pam.services.swaylock = {}; # fix https://github.com/ryan4yin/nix-config/issues/10
    ## START peripherals.nix
    # Audio(PipeWire)
    environment.systemPackages = with pkgs; [
      pulseaudio # Provides `pactl`, which is required by some apps(e.g. sonic-pi)
      wl-clipboard
    ];
    # PipeWire is a new low-level multimedia framework.
    # It aims to offer capture and playback for both audio and video with minimal latency.
    # It support for PulseAudio-, JACK-, ALSA- and GStreamer-based applications.
    # PipeWire has a great bluetooth support, it can be a good alternative to PulseAudio.
    # https://nixos.wiki/wiki/PipeWire
    services.pipewire = {
      enable = lib.mkDefault true;
      alsa.enable = lib.mkDefault true;
      alsa.support32Bit = lib.mkDefault true;
      pulse.enable = lib.mkDefault true;
      jack.enable = lib.mkDefault true;
      wireplumber.enable = lib.mkDefault true;
    };
    security.rtkit.enable = lib.mkDefault true; # rtkit is optional but recommended
    # Bluetooth
    hardware.bluetooth.enable = lib.mkDefault true;
    services.blueman.enable = lib.mkDefault true;
    # Misc
    services = {
      printing.enable = lib.mkDefault true; # Enable CUPS to print documents.
      geoclue2.enable = lib.mkDefault true; # Enable geolocation services.
      udev.packages = with pkgs; [
        gnome-settings-daemon
        platformio # udev rules for platformio
        openocd # required by paltformio, see https://github.com/NixOS/nixpkgs/issues/224895
        android-udev-rules # required by adb
        openfpgaloader
      ];
      # A key remapping daemon for linux.
      # https://github.com/rvaiya/keyd
      keyd = {
        enable = lib.mkDefault true;
        keyboards.default.settings = {
          main = { # overloads the capslock key to function as both escape (when tapped) and control (when held)
            capslock = "overload(control, esc)";
            esc = "capslock";
          };
        };
      };
    };
    ## END peripherals.nix
    ## START misc.nix
    # The OpenSSH agent remembers private keys for you
    # so that you donâ€™t have to type in passphrases every time you make an SSH connection.
    # Use `ssh-add` to add a key to the agent.
    programs = {
      # ssh.startAgent = mkDefault true; # You cannot use ssh-agent and GnuPG
      # agent with SSH support enabled at the same time
      dconf.enable = mkDefault true;
      thunar = { # thunar file manager(part of xfce)
        enable = mkDefault true;
        plugins = with pkgs.xfce; [
          thunar-archive-plugin
          thunar-volman
        ];
      };
      light.enable = mkDefault true;
    };
    ## END misc.nix
    ## START security.nix
    security.polkit.enable = mkDefault true; # security with polkit
    # security with gnome-kering
    services.gnome.gnome-keyring.enable = mkDefault true;
    security.pam.services.greetd.enableGnomeKeyring = mkDefault true;
    ## END security.nix
  };
}
